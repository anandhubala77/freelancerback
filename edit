// models/userSchema.js
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    lastName: {
      type: String,
      require: true,
    },
    email: {
      type: String,
      require: true,
      unique: true, // Email should be unique
    },
    password: {
      type: String,
      require: true,
    },
    companyName: {
      type: String,
    },
    companyDescription: {
      type: String,
    },
    position: {
      type: String,
    },
    role: {
      type: String,
      enum: ["jobseeker", "hiringperson", "admin"],
      required: true,
    },
    google: {
      type: String,
    },
    linkedin: {
      type: String,
    },
    profile: {
      type: String, // file path like 'uploads/1234-image.jpg'
    },
    profileimg: {
      type: String,
    },

    reportedBy: [
      {
        reporterId: { type: mongoose.Schema.Types.ObjectId, ref: "users" },
        reason: String,
        reportedAt: { type: Date, default: Date.now },
        responseMessage: String,
        responseAt: Date,
      },
    ],

    // --- NEW FIELDS FOR PROFILE ---
    skills: {
      type: [String], // Array of strings for skills
      default: [],
    },
    education: [
      {
        // Array of education objects
        degree: { type: String },
        institution: { type: String },
        year: { type: String }, // Or Number, depending on your preference
      },
    ],
    experience: [
      {
        // Array of experience objects
        title: { type: String },
        company: { type: String },
        startDate: { type: String }, // Or Date type if you want to handle dates
        endDate: { type: String }, // Or Date type
        description: { type: String },
      },
    ],
  },
  { timestamps: true }
); // Add timestamps for createdAt and updatedAt

const users = mongoose.model("users", userSchema);
module.exports = users;
const mongoose = require("mongoose");

const projectSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "users",
    required: true,
  },
  title: {
    type: String,
    required: true,
    trim: true,
    minlength: 5,
    maxlength: 100,
  },
  description: {
    type: String,
    required: true,
    trim: true,
    minlength: 20,
    maxlength: 2000,
  },
  budget: {
    type: Number,
    required: true,
    min: 0,
  },
  skillsRequired: {
    type: [String],
    default: [],
  },
  timeline: {
    type: String,
    trim: true,
    maxlength: 100,
    default: "Flexible",
  },
  category: {
    type: String,
    required: true,
    trim: true,
    maxlength: 50,
  },
  location: {
    type: String,
    trim: true,
    maxlength: 100,
    default: "Remote",
  },
  image: {
    type: String, // ✅ Added image (URL or filename)
    default: "",
  },
  status: {
    type: String,
    enum: ["posted", "active", "completed", "cancelled"],
    default: "posted",
  },
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "users",
    default: null,
  },
  progress: {
    type: Number,
    min: 0,
    max: 100,
    default: 0,
  },
  completionDate: {
    type: Date,
    default: null,
  },
  freelancer: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "users",
    default: null,
  },
  reports: [
    {
      reportedBy: { type: mongoose.Schema.Types.ObjectId, ref: "users" },
      reason: String,
      createdAt: { type: Date, default: Date.now },
      responseMessage: String,
        responseAt: Date,
    },
  ],
}, {
  timestamps: true // ✅ Adds createdAt and updatedAt
});

const Project = mongoose.model("Project", projectSchema);

module.exports = Project;
